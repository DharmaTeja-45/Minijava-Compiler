//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   public HashMap<String,Classinfo>classMap=new HashMap<>();//map
   public boolean lambdaPresent=false;
   String curclass= "";
   String curmethod = "";
   int temp= 0;
   String d= "";
   public boolean checkEqCompatible(String lhstype, String rhstype) {
      if (Objects.equals(lhstype, rhstype)) return true;
      

      if (classMap.get(lhstype) == null) {
         return false;
      } else {
         while (!lhstype.equals(rhstype) && rhstype != null && !rhstype.equals("@")) {
            Classinfo rhsClass = classMap.get(rhstype);
            if (rhsClass == null) break; 
            rhstype = rhsClass.parent;
         }
         return lhstype.equals(rhstype);
      }
   }
   

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ImportFunction() )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(lambdaPresent && (n.f0.node== null)){
         throw new SymbolTableException();
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "import"
    * f1 -> "java.util.function.Function"
    * f2 -> ";"
    */
   public R visit(ImportFunction n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"validcheck");
      curclass= n.f1.f0.toString();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      curmethod= "main";
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      curmethod="";
      curclass="";
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"validcheck");
      curclass= n.f1.f0.toString();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"validcheck");
      n.f2.accept(this, argu);
      n.f3.accept(this, (A)"validcheck");
      curclass= n.f1.f0.toString();
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"validcheck");
      n.f1.accept(this, (A)"");
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      
      n.f1.accept(this, (A)"validcheck");
      n.f2.accept(this, (A)"");
      curmethod= n.f2.f0.toString();
      String rettype= classMap.get(curclass).methodMap.get(curmethod).rettype;
      String parent= classMap.get(curclass).parent;
      while(!parent.equals("@")){
         if(classMap.get(parent).methodMap.containsKey(curmethod)){
            if(classMap.get(parent).methodMap.get(curmethod).rettype.equals(rettype) && classMap.get(curclass).methodMap.get(curmethod).arguements.equals(classMap.get(parent).methodMap.get(curmethod).arguements) ){
               
            }
            else{
               throw new TypeException();
            }
            break;
         }
         parent= classMap.get(parent).parent;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String s= (String)n.f10.accept(this, argu);
      
      if(!checkEqCompatible(rettype, s)){
         throw new TypeException();
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      curmethod= "";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"validcheck");
      n.f1.accept(this, (A)"");
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    *       | LambdaType()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret= n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "Function"
    * f1 -> "<"
    * f2 -> Identifier()
    * f3 -> ","
    * f4 -> Identifier()
    * f5 -> ">"
    */
   public R visit(LambdaType n, A argu) {
      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String lhstype= (String)n.f0.accept(this, (A)"type");
      if(lhstype.startsWith("Function<")){
         d= lhstype;

        
         n.f1.accept(this, argu);
         String rhstype= (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         if(!checkEqCompatible(lhstype, rhstype)){
            throw new TypeException();
         }
      }
      else{
         n.f1.accept(this, argu);
         String rhstype= (String)n.f2.accept(this, (A)"type");
         n.f3.accept(this, argu);
         if(temp!= 1 && (!checkEqCompatible(lhstype, rhstype))){
            throw new TypeException();
         }
      }
      temp= 0;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
   if(!"int[]".equals((String)n.f0.accept(this, (A)"type"))){
      throw new TypeException();
   }
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){
      throw new TypeException();
   }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   if(!"int".equals((String)n.f5.accept(this, argu))){
      throw new TypeException();
   }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   if(!"boolean".equals((String)n.f2.accept(this, argu))){
      throw new TypeException();
   }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   if(!"boolean".equals((String)n.f2.accept(this, argu))){
      throw new TypeException();
   }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   if(!"boolean".equals((String)n.f2.accept(this, argu))){
      throw new TypeException();
   }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(!("int").equals((String)n.f2.accept(this, argu))){
         throw new TypeException();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | LambdaExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      return (R) n.f0.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> "->"
    * f4 -> Expression()
    */
   public R visit(LambdaExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(d.equals(""))throw new TypeException();
      n.f1.accept(this, (A)"");
      String s= (d).substring(9, (d).length()-1);
      int commaIndex= s.indexOf(',');
      String paramType = s.substring(0, commaIndex).trim();
      String returnType = s.substring(commaIndex + 1).trim();
      classMap.get(curclass).methodMap.get(curmethod).varMap.put(n.f1.f0.toString(), paramType);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      String rhtype= (String)n.f4.accept(this, argu);
      if(!checkEqCompatible(returnType, rhtype)){
         throw new TypeException();
      }
      //_ret= n.f4.accept(this, argu);
      classMap.get(curclass).methodMap.get(curmethod).varMap.remove(n.f1.f0.toString());
      return (R)(d);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
   if(!"boolean".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"boolean".equals((String)n.f2.accept(this, argu))){throw new TypeException();}

      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
   if(!"boolean".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"boolean".equals((String)n.f2.accept(this, argu))){throw new TypeException();}

      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
   if(!"int".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}

      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String lhstype= (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String rhstype= (String)n.f2.accept(this, argu);
      if(!checkEqCompatible(lhstype, rhstype) && !checkEqCompatible(rhstype, lhstype)){
         throw new TypeException();
      }
      
      return (R)("boolean");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
   if(!"int".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}

      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
   if(!"int".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}

      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
   if(!"int".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}
      
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
   if(!"int".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}
      
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
   if(!"int[]".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
   if(!"int".equals((String)n.f2.accept(this, argu))){throw new TypeException();}
      n.f3.accept(this, argu);
      
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
   if(!"int[]".equals((String)n.f0.accept(this, argu))){throw new TypeException();}
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)("int");
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {

      R _ret=null;
      String recvType = (String) n.f0.accept(this, (A) "");
      if(recvType.equals("int[]"))throw new SymbolTableException();
      n.f1.accept(this, argu);
      String methodname = (String) n.f2.accept(this, (A) "");
      
      if(recvType.startsWith("Function<")){


          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
         String s= recvType.substring(9, recvType.length()-1);
          int commaIndex= s.indexOf(',');
          String paramType= s.substring(0, commaIndex).trim();
          String returnType= s.substring(commaIndex+1).trim();
          if (!"apply".equals(methodname)) {
             throw new SymbolTableException();
          }
          if (n.f4.node == null) {
             throw new TypeException();
          }
          ExpressionList el = (ExpressionList) n.f4.node;
          if (el.f1.nodes.size() != 0) {
             throw new TypeException();
          }
          String actualArgType = (String) el.f0.accept(this, (A) "type");
          if (!checkEqCompatible(paramType, actualArgType)) {
             throw new TypeException();
          }
          n.f5.accept(this, argu);
          return (R) returnType;
      }

      if (classMap.get(recvType) == null) {
         throw new TypeException();
      }

      String cls = recvType;
      while (cls != null && classMap.get(cls).methodMap.get(methodname) == null) {
         cls = classMap.get(cls).parent;
         if ("@".equals(cls)) cls = null;
      }
      if (cls == null) throw new SymbolTableException();

      Methodinfo mi = classMap.get(cls).methodMap.get(methodname);
      if (mi == null) throw new SymbolTableException();
      Vector<String> actual = new Vector<String>();
      int it= 0;
      if (n.f4 != null && n.f4.node != null) {
         it++;
         if(it<= mi.arguements.size() && mi.arguements.get(it-1).startsWith("Function<")){
            d= mi.arguements.get(it-1);
         }
         ExpressionList el = (ExpressionList) n.f4.node;
         actual.add((String) el.f0.accept(this, (A) "type"));
         for (Node node : el.f1.nodes) {
            ExpressionRest er = (ExpressionRest) node;
            actual.add((String) er.f1.accept(this, (A) "type"));
         }
      }

      if (actual.size() != mi.arguements.size()) throw new TypeException();

      for (int i = 0; i < actual.size(); i++) {
         String expected = mi.arguements.get(i);
         String got = actual.get(i);
         if (!checkEqCompatible(expected, got)) {
            throw new TypeException();
         }
      }

      n.f3.accept(this, argu);
      if (n.f4 != null) n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      return (R) mi.rettype;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String MethodArgs=  (String)n.f0.accept(this, argu);
      n.f1.accept(this,argu);
      return (R)MethodArgs;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {

      R _ret=null;
      _ret= (R)n.f0.accept(this, (A)"type");
      temp= 2;
      return _ret;

   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)("int");
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)("boolean");
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)("boolean");
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
    R _ret = null;
    n.f0.accept(this, argu);
    String s = n.f0.toString();
      if ("type".equals(argu)) {
         if (classMap.get(curclass) == null) {
            throw new SymbolTableException();
         }
         if (!"".equals(curmethod)) {
            Methodinfo m = classMap.get(curclass).methodMap.get(curmethod);
            if (m == null) {
               throw new SymbolTableException();
            }
            if (m.varMap.get(s) != null) {
               _ret = (R) m.varMap.get(s);
            }
            else if (m.arguementsMap.get(s) != null) {
               _ret = (R) m.arguementsMap.get(s);
            }
            else {
               String cls = curclass;
               while (!"@".equals(cls)) {
                  Classinfo cinfo = classMap.get(cls);
                  if (cinfo != null && cinfo.varMap.get(s) != null) {
                     _ret = (R) cinfo.varMap.get(s);
                     break;
                  }
                  cls = (classMap.get(cls) != null) ? classMap.get(cls).parent : "@";
               }
               if("@".equals(cls)){
                  throw new SymbolTableException();
               }
            }
         }
         else {
            String cls = curclass;
            while (!"@".equals(cls)) {
               Classinfo cinfo = classMap.get(cls);
               if (cinfo != null && cinfo.varMap.get(s) != null) {
                  _ret = (R) cinfo.varMap.get(s);
                  break;
               }
               cls = (classMap.get(cls) != null) ? classMap.get(cls).parent : "@";
            }
            if("@".equals(cls)){
               throw new SymbolTableException();
            }
         }
      } 
      else if("validcheck".equals(argu)) {

         if ("Integer".equals(s)) {
            _ret = (R) "int";
         } else if ("Boolean".equals(s)) {
            _ret = (R) "boolean";
         } else {
            if (classMap.get(s) == null) {
               throw new SymbolTableException();
            }
            _ret = (R) s;
         }
      }
      else {
         
         _ret = (R) s;
      }

      return _ret;
   }


   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(curclass);
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String sizetype = (String) n.f3.accept(this, (A)"type");
      if (!"int".equals(sizetype)) {
         throw new TypeException();
      }
      n.f4.accept(this, argu);
      return (R) ("int[]");
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s= (String)n.f1.accept(this, (A)"validcheck");
      if(classMap.get(s)== null){
         throw new SymbolTableException();
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)s;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!"boolean".equals((String)n.f1.accept(this, argu))){
         throw new TypeException();
      }
      return (R)("boolean");
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret= (R)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
